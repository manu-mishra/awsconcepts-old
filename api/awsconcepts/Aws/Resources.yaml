AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Aws-Concepts-Backend-Infrastructure

Parameters:
  environmentName:
    Type: String
    Default: Prod

Resources:
  apiGateway:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Sub "${environmentName}-api-gtw" 
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: ANY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn

  lambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://awsconcepts-terraform-deployments/awsconcepts/lambdapackages/rootlambdapackage.zip
      Description: Root Lambda function
      FunctionName: !Sub "${environmentName}-root-lambda"
      Handler: AwsConceptsRootLambda
      Architectures:
        - x86_64
      MemorySize: 256
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: dotnet6
      Timeout: 30
      Events:
        RootResource:
          Type: Api
          Properties:
            Path: "/"
            Method: ANY

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/api/ANY/

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${environmentName}-root-lambda:*
          PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${environmentName}-root-lambda
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/api

  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn